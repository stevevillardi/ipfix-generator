import sys
import argparse
import random
import socket
import struct
import time
import ipaddress
import csv
import os
from io import BytesIO
import base64
from scapy.all import IP, UDP, Raw, send
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, 
                             QPushButton, QTextEdit, QSpinBox, QDoubleSpinBox, QTableWidget, 
                             QTableWidgetItem, QFileDialog, QSplitter, QStatusBar)
from PyQt5.QtCore import (QThread, pyqtSignal, Qt)
from PyQt5.QtGui import QPixmap, QImage

LOGO_BASE64 = """

"""

def parse_ip_ranges(ip_ranges):
    ip_list = []
    for ip_range in ip_ranges.split(','):
        ip_range = ip_range.strip()
        try:
            if '/' in ip_range:
                ip_list.extend([str(ip) for ip in ipaddress.IPv4Network(ip_range, strict=False)])
            else:
                ipaddress.IPv4Address(ip_range)
                ip_list.append(ip_range)
        except ValueError:
            print(f"Invalid IP address or range: {ip_range}")
    return ip_list

def generate_flows(flow_src_ips, flow_dst_ips, num_flows=1000):
    flows = []
    for _ in range(num_flows):            
        # Common ports
        ports = [
            (20, "FTP Data Transfer"),  # File Transfer Protocol - Data Stream
            (21, "FTP Control"),  # File Transfer Protocol - Control Stream
            (22, "SSH"),  # Secure Shell - used for secure logins, file transfers (scp, sftp) and port forwarding
            (23, "Telnet"),  # Telnet protocol - unencrypted text communications
            (25, "SMTP"),  # Simple Mail Transfer Protocol - sending email
            (53, "DNS"),  # Domain Name System - translating domain names to IP addresses
            (80, "HTTP"),  # Hypertext Transfer Protocol - used for unencrypted web browsing
            (110, "POP3"),  # Post Office Protocol - used by email clients to retrieve emails from a server
            (119, "NNTP"),  # Network News Transfer Protocol - used for accessing newsgroups
            (123, "NTP"),  # Network Time Protocol - used for clock synchronization between computer systems
            (143, "IMAP"),  # Internet Message Access Protocol - used by email clients to retrieve emails from a server
            (389, "LDAP"),  # Lightweight Directory Access Protocol - used for accessing and maintaining distributed directory information services
            (443, "HTTPS"),  # HTTP Secure - used for secure web browsing
            (465, "SMTPS"),  # SMTP over SSL - used for sending email securely
            (500, "ISAKMP"),  # Internet Security Association and Key Management Protocol - used for establishing Security Associations (SA) in IPsec
            (515, "LPD"),  # Line Printer Daemon - used for print services
            (636, "LDAPS"),  # LDAP over SSL - secure version of LDAP
            (993, "IMAPS"),  # IMAP over SSL - used for retrieving email securely
            (995, "POP3S"),  # POP3 over SSL - used for retrieving email securely
            (1433, "MS SQL"),  # Microsoft SQL Server database management system
            (1521, "Oracle"),  # Oracle database default listener
            (3306, "MySQL"),  # MySQL database system
            (3389, "RDP"),  # Remote Desktop Protocol - used for remote access to Windows desktops
            (5060, "SIP"),  # Session Initiation Protocol - used for VoIP and video calls
            (5061, "SIP TLS"),  # SIP over TLS - secure version of SIP
            (5432, "PostgreSQL"),  # PostgreSQL database system
            (8080, "HTTP Alternate"),  # Commonly used for web servers as an alternative to port 80
            (8443, "HTTPS Alternate")  # Commonly used for secure web servers as an alternative to port 443
        ]

        #Source: https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
        protocols = {
            1: "ICMP",
            6: "TCP",
            17: "UDP"
        }

        if flow_src_ips:
            src_ip = random.choice(flow_src_ips)
        else:
            src_ip = f"{random.randint(1, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"

        if flow_dst_ips:
            dst_ip = random.choice(flow_dst_ips)
        else:
            dst_ip = f"{random.randint(1, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"

        dst_port, dst_port_name = random.choice(ports)

        flow = {
            'src_ip': src_ip,
            'dst_ip': dst_ip,
            'dst_port': dst_port,
            'protocol': random.choice(list(protocols.keys())),
            'ingress_interface' : random.randint(0, 65535),
            'egress_interface' : random.randint(0, 65535)
        }
        flows.append(flow)
    
    return flows

class IPFIXGeneratorThread(QThread):
    update_signal = pyqtSignal(str)
    flow_signal = pyqtSignal(dict)
    stats_signal = pyqtSignal(int)  # New signal for updating total flows sent

    def __init__(self, source_ips, destination_ip, destination_port, num_flows, interval, packets_per_interval, flows_per_packet, flow_src_ips, flow_dst_ips, flows):
        QThread.__init__(self)
        self.source_ips = source_ips
        self.destination_ip = destination_ip
        self.destination_port = destination_port
        self.num_flows = num_flows
        self.interval = interval
        self.flows = flows
        self.packets_per_interval = packets_per_interval
        self.flows_per_packet = flows_per_packet
        self.flow_src_ips = flow_src_ips
        self.flow_dst_ips = flow_dst_ips
        self.is_running = True
        self.template_refresh_interval = 60  # Send template every 60 seconds
        self.sequence_number = 0
        self.last_template_time = 0
        self.observation_domain_id = random.randint(0, 2**32 - 1)
        self.total_flows_sent = 0  # New counter for total flows sent
        self.current_flow_index = 0

    def generate_ipfix_header(self, length, is_data_record=False):
        version = 10
        export_time = int(time.time())
        sequence_number = self.sequence_number if is_data_record else 0
        
        header = struct.pack('!HHLLL',
            version,
            length,
            export_time,
            sequence_number,
            self.observation_domain_id
        )
        
        if is_data_record:
            self.sequence_number += 1
        
        return header

    def generate_ipfix_template(self):
        template_id = 257
        field_count = 16
        
        # Pack the field specifiers first to get the correct length
        field_specifiers = struct.pack('!HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH',
            8, 4,   # sourceIPv4Address
            12, 4,  # destinationIPv4Address
            7, 2,   # sourceTransportPort
            11, 2,  # destinationTransportPort
            4, 1,   # protocolIdentifier
            5, 1,   # ipClassOfService (optional)
            2, 4,   # inPacketDeltaCount
            24, 4,  # outPacketDeltaCount
            1, 4,   # inOctetDeltaCount
            23, 4,  # outOctetDeltaCount
            152, 8, # flowStartMilliseconds (optional ASA only)
            153, 8, # flowEndMilliseconds
            10, 4,  # ingressInterface
            14, 4,  # egressInterface
            95, 4,  # applicationId
            94, 2  # applicationName
        )
        
        # Calculate the total length of the template set
        total_length = 4 + 4 + len(field_specifiers)  # 4 bytes for set header, 4 bytes for template header
        
        template_set_header = struct.pack('!HH', 2, total_length)  # FlowSet ID = 2 for templates
        template_header = struct.pack('!HH', template_id, field_count)
        
        return template_set_header + template_header + field_specifiers

    def generate_ipfix_data_record(self):

        # NBAR application data 
        # Source: https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/qos_nbar/prot_lib/config_library/pp6000/nbar-prot-pack6000/nbar-prot-pack6000_CLT_chapter.html
        nbar_applications = [
            (1454, "facebook", "Social Networking"),
            (82, "youtube", "Streaming Media"),
            (3, "http", "Web"),
            (1312, "ssl", "Network Protocol"),
            (1453, "twitter", "Social Networking"),
            (1456, "google-services", "Cloud and Data Center"),
            (72, "dns", "Network Protocol"),
            (1217, "slack", "Collaboration"),
            (31, "ntp", "Network Protocol"),
            (40, "ssh", "Network Protocol"),
            (1431, "ms-office-365", "Cloud and Data Center"),
            (1306, "webex-meeting", "Collaboration"),
            (1316, "netflix", "Streaming Media"),
            (1488, "whatsapp", "Social Networking"),
            (69, "bittorrent", "File Sharing")
        ]

        if self.current_flow_index >= len(self.flows):
            self.current_flow_index = 0
            self.update_signal.emit("End of flow array reached, replaying generated flow series.")

        flow = self.flows[self.current_flow_index]
        self.current_flow_index += 1

        src_ip = socket.inet_aton(flow['src_ip'])
        dst_ip = socket.inet_aton(flow['dst_ip'])
        src_port = random.randint(1024, 65535)
        dst_port = flow['dst_port']
        protocol = flow['protocol']
        ingress_interface = flow['ingress_interface']
        egress_interface = flow['egress_interface']

        tos = random.randint(0, 255)
        inpackets = random.randint(1, 1000)
        inoctets = inpackets * random.randint(64, 1500)
        outpackets = random.randint(1, 1000)
        outoctets = outpackets * random.randint(64, 1500)
        
        current_time_ms = int(time.time() * 1000)
        start_time = current_time_ms - random.randint(1000, 60000)
        end_time = current_time_ms

        application_id, application_name, application_category = random.choice(nbar_applications)
        
        record = struct.pack('!4s4sHHBBIIIIQQIIIH',
            src_ip,
            dst_ip,
            src_port,
            dst_port,
            protocol,
            tos,
            inpackets,
            outpackets,
            inoctets,
            outoctets,
            start_time,
            end_time,
            ingress_interface,
            egress_interface,
            application_id,
            len(application_name)
        )

        decoded_flow = {
            'src_ip': socket.inet_ntoa(src_ip),
            'dst_ip': socket.inet_ntoa(dst_ip),
            'src_port': src_port,
            'dst_port': dst_port,
            'protocol': str(protocol),
            'application': application_name,
            'application_category': application_category,
            'tos': tos,
            'in_packets': inpackets,
            'out_packets': inpackets,
            'in_octets': inoctets,
            'out_octets': inoctets,
            'start_time': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time / 1000)),
            'end_time': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time / 1000))
        }
        self.flow_signal.emit(decoded_flow)

        return (record) 

    def send_ipfix(self, source_ips, destination_ip, destination_port, num_flows, interval, packets_per_interval, flows_per_packet):
        flowset_id = 257
        while self.is_running and (num_flows == 0 or num_flows > 0):
            current_time = time.time()
            
            # Send template if it's time
            if current_time - self.last_template_time >= self.template_refresh_interval:
                for source_ip in source_ips:
                    template = self.generate_ipfix_template()
                    template_length = len(template) + 16  # 16 is the size of the IPFIX header
                    template_header = self.generate_ipfix_header(template_length, is_data_record=False)
                    template_packet = IP(src=source_ip, dst=destination_ip) / UDP(sport=random.randint(1024, 65535), dport=destination_port) / Raw(load=template_header + template)
                    send(template_packet, verbose=False)
                    self.update_signal.emit(f"Sent IPFIX template from {source_ip} to {destination_ip}:{destination_port}")
                self.last_template_time = current_time

            # Send data flows
            flows_sent = 0
            while flows_sent < packets_per_interval:
                if not self.is_running or (num_flows > 0 and num_flows <= 0):
                    break
                
                # Determine number of flows for this packet
                if flows_per_packet == 0:
                    packet_flows = random.randint(1, 10)
                else:
                    packet_flows = min(flows_per_packet, packets_per_interval - flows_sent)
                
                data_records = b''
                for _ in range(packet_flows):
                    data_records += self.generate_ipfix_data_record()
                
                data_set_header = struct.pack('!HH', flowset_id, len(data_records) + 4)  # +4 for the set header itself
                total_length = 16 + len(data_set_header) + len(data_records)  # 16 is the size of the IPFIX header
                header = self.generate_ipfix_header(total_length, is_data_record=True)
                payload = header + data_set_header + data_records

                for source_ip in source_ips:
                    pkt = IP(src=source_ip, dst=destination_ip) / UDP(sport=random.randint(1024, 65535), dport=destination_port) / Raw(load=payload)
                    send(pkt, verbose=False)
                    self.update_signal.emit(f"Sent IPFIX packet with {packet_flows} flows from {source_ip} to {destination_ip}:{destination_port}")

                flows_sent += packet_flows
                self.total_flows_sent += packet_flows * len(source_ips)
                self.stats_signal.emit(self.total_flows_sent)

                if num_flows > 0:
                    num_flows -= packet_flows

            time.sleep(interval)

        self.update_signal.emit("Finished sending IPFIX traffic")

    def run(self):
        self.send_ipfix(self.source_ips, self.destination_ip, self.destination_port, self.num_flows, self.interval, self.packets_per_interval, self.flows_per_packet)

    def stop(self):
        self.is_running = False

class IPFIXGeneratorGUI(QWidget):
    def __init__(self, cli_args=None):
        super().__init__()
        self.cli_args = cli_args
        self.flows = []
        self.total_flows_sent = 0
        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout(self)

        # Create a vertical splitter for the entire layout
        main_splitter = QSplitter(Qt.Vertical)
        
        # Add status bar
        self.status_bar = QStatusBar()
        self.status_bar.setFixedHeight(40)  # Increase status bar height
        
        # Add logo to status bar (left-aligned and larger)
        logo_label = QLabel()
        logo_pixmap = self.get_logo()
        if logo_pixmap:
            logo_label.setPixmap(logo_pixmap.scaledToHeight(30, Qt.SmoothTransformation))
            logo_label.setContentsMargins(5, 0, 5, 0)  # Add some horizontal padding
        self.status_bar.addWidget(logo_label)
        
        # Add a stretch to push other items to the right
        self.status_bar.addPermanentWidget(QWidget(), 1)

        self.source_hosts_label = QLabel("Source Hosts: 0")
        self.total_flows_label = QLabel("Total Flows Sent: 0")
        self.status_bar.addPermanentWidget(self.source_hosts_label)
        self.status_bar.addPermanentWidget(self.total_flows_label)
        main_layout.addWidget(self.status_bar)

        self.setWindowTitle('LogicMonitor Demo Engineering: IPFIX Generator')
        self.resize(1000, 800)  # Set a default size
        self.show()

        # Top section
        top_widget = QWidget()
        top_layout = QHBoxLayout(top_widget)

        # Left side: Input fields
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        self.add_input_fields(left_layout)

        # Button layout
        button_layout = QHBoxLayout()
        self.start_button = QPushButton("Start")
        self.start_button.clicked.connect(self.start_generation)
        button_layout.addWidget(self.start_button)

        self.stop_button = QPushButton("Stop")
        self.stop_button.clicked.connect(self.stop_generation)
        self.stop_button.setEnabled(False)
        button_layout.addWidget(self.stop_button)

        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_screen)
        button_layout.addWidget(self.clear_button)

        self.export_button = QPushButton("Export Flows")
        self.export_button.clicked.connect(self.export_flows)
        self.export_button.setEnabled(False)
        button_layout.addWidget(self.export_button)

        left_layout.addLayout(button_layout)

        # Right side: Log output
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)

        # Add widgets to the top layout
        top_layout.addWidget(left_widget)
        top_layout.addWidget(self.log_output)

        # Add top widget to the main splitter
        main_splitter.addWidget(top_widget)

        # Flow table
        self.flow_table = QTableWidget()
        self.flow_table.setColumnCount(11)
        self.flow_table.setHorizontalHeaderLabels(['Src IP', 'Dst IP', 'Src Port', 'Dst Port', 'Protocol', 
                                                   'Application', 'Category' ,'ToS', 'Packets', 'Octets', 'Start Time', 'End Time'])
        main_splitter.addWidget(self.flow_table)

        # Set the main layout
        main_layout.addWidget(main_splitter)

        self.setWindowTitle('Demo Engineering: IPFIX Generator')
        self.resize(1150, 800)  # Set a default size
        self.show()

    def get_logo(self):
        try:
            # Decode the base64 string to image data
            image_data = base64.b64decode(LOGO_BASE64)
            
            # Create a QImage from the image data
            image = QImage()
            image.loadFromData(image_data)
            
            # Convert QImage to QPixmap
            pixmap = QPixmap.fromImage(image)
            
            if pixmap.isNull():
                print("Failed to load logo")
                return None
            
            return pixmap
        except Exception as e:
            print(f"Error loading logo: {e}")
            return None

    def add_input_fields(self, layout):
        # Source IPs
        source_layout = QHBoxLayout()
        source_layout.addWidget(QLabel("Source IPs (comma-separated):"))
        self.source_ips = QLineEdit(self.cli_args.source if self.cli_args else "")
        source_layout.addWidget(self.source_ips)
        layout.addLayout(source_layout)

        # Destination IP
        dest_layout = QHBoxLayout()
        dest_layout.addWidget(QLabel("Destination IP:"))
        self.dest_ip = QLineEdit(self.cli_args.destination if self.cli_args else "")
        dest_layout.addWidget(self.dest_ip)
        layout.addLayout(dest_layout)

        # Destination Port
        dest_port_layout = QHBoxLayout()
        dest_port_layout.addWidget(QLabel("Destination Port:"))
        self.dest_port = QSpinBox()
        self.dest_port.setRange(1, 65535)
        self.dest_port.setValue(self.cli_args.port if self.cli_args else 2055)
        dest_port_layout.addWidget(self.dest_port)
        layout.addLayout(dest_port_layout)

        # Number of Flows
        flows_layout = QHBoxLayout()
        flows_layout.addWidget(QLabel("Number of Flows (0 for infinite):"))
        self.num_flows = QSpinBox()
        self.num_flows.setRange(0, 1000000)
        self.num_flows.setValue(self.cli_args.flows if self.cli_args else 0)
        flows_layout.addWidget(self.num_flows)
        layout.addLayout(flows_layout)

        # Interval
        interval_layout = QHBoxLayout()
        interval_layout.addWidget(QLabel("Interval (seconds):"))
        self.interval = QDoubleSpinBox()
        self.interval.setRange(0.1, 60)
        self.interval.setSingleStep(0.1)
        self.interval.setValue(self.cli_args.interval if self.cli_args else 1.0)
        interval_layout.addWidget(self.interval)
        layout.addLayout(interval_layout)

        # Flows per Interval
        packets_per_interval_layout = QHBoxLayout()
        packets_per_interval_layout.addWidget(QLabel("Packets per Interval:"))
        self.packets_per_interval = QSpinBox()
        self.packets_per_interval.setRange(1, 1000)
        self.packets_per_interval.setValue(self.cli_args.packets_per_interval if self.cli_args else 5)
        packets_per_interval_layout.addWidget(self.packets_per_interval)
        layout.addLayout(packets_per_interval_layout)

        # Flows per Packet
        flows_per_packet_layout = QHBoxLayout()
        flows_per_packet_layout.addWidget(QLabel("Flows per Packet (0 for random 1-10):"))
        self.flows_per_packet = QSpinBox()
        self.flows_per_packet.setRange(0, 1000)
        self.flows_per_packet.setValue(self.cli_args.flows_per_packet if self.cli_args else 0)
        flows_per_packet_layout.addWidget(self.flows_per_packet)
        layout.addLayout(flows_per_packet_layout)

        # Flow Source IPs
        flow_src_ips_layout = QVBoxLayout()
        flow_src_ips_layout.addWidget(QLabel("Flow Source IPs (comma-separated, CIDR allowed):"))
        self.flow_src_ips = QTextEdit()
        self.flow_src_ips.setPlaceholderText("Enter IP addresses or CIDR ranges, one per line or comma-separated")
        self.flow_src_ips.setFixedHeight(80)  # Adjust height as needed
        if self.cli_args and self.cli_args.flow_src_ips:
            self.flow_src_ips.setPlainText(self.cli_args.flow_src_ips)
        else:
            self.flow_src_ips.setPlainText("192.168.1.0/24")
        flow_src_ips_layout.addWidget(self.flow_src_ips)
        layout.addLayout(flow_src_ips_layout)

        # Flow Destination IPs
        flow_dst_ips_layout = QVBoxLayout()
        flow_dst_ips_layout.addWidget(QLabel("Flow Destination IPs (comma-separated, CIDR allowed):"))
        self.flow_dst_ips = QTextEdit()
        self.flow_dst_ips.setPlaceholderText("Enter IP addresses or CIDR ranges, one per line or comma-separated")
        self.flow_dst_ips.setFixedHeight(80)  # Adjust height as needed
        if self.cli_args and self.cli_args.flow_dst_ips:
            self.flow_dst_ips.setPlainText(self.cli_args.flow_dst_ips)
        else:
            self.flow_dst_ips.setPlainText("54.193.15.255/32,54.194.232.54/32,54.209.7.170/32,54.254.224.41/32,69.25.43.0/24")
        flow_dst_ips_layout.addWidget(self.flow_dst_ips)
        layout.addLayout(flow_dst_ips_layout)

    def clear_screen(self):
        # Clear the flow table
        self.flow_table.setRowCount(0)
        self.flows = []

        # Clear the log output
        self.log_output.clear()

        #Clear status bar
        self.total_flows_label.setText("Total Flows Sent: 0")
        self.source_hosts_label.setText(f"Source Hosts: 0")

    def start_generation(self):
        # Clear the flow table
        self.flow_table.setRowCount(0)
        self.flows = []

        # Clear the log output
        self.log_output.clear()

        # Reset total flows sent
        self.total_flows_sent = 0
        self.total_flows_label.setText("Total Flows Sent: 0")

        source_ips = [ip.strip() for ip in self.source_ips.text().split(',')]
        self.source_hosts_label.setText(f"Source Hosts: {len(source_ips)}")

        dest_ip = self.dest_ip.text()
        dest_port = self.dest_port.value()
        num_flows = self.num_flows.value()
        interval = self.interval.value()
        packets_per_interval = self.packets_per_interval.value()
        flows_per_packet = self.flows_per_packet.value()

        flow_src_ips = parse_ip_ranges(self.flow_src_ips.toPlainText()) if self.flow_src_ips.toPlainText() else []
        flow_dst_ips = parse_ip_ranges(self.flow_dst_ips.toPlainText()) if self.flow_dst_ips.toPlainText() else []
        
        # Generate flows
        num_flows_to_generate = 1000  # Generate at least 10000 flows or the specified number
        flows = generate_flows(flow_src_ips, flow_dst_ips, num_flows_to_generate)  # Assuming TCP (protocol 6)
        self.update_log(f"Generated {num_flows_to_generate} sample flows for generation")

        self.generator_thread = IPFIXGeneratorThread(source_ips, dest_ip, dest_port, num_flows, interval, packets_per_interval, flows_per_packet, flow_src_ips, flow_dst_ips, flows)
        self.generator_thread.update_signal.connect(self.update_log)
        self.generator_thread.flow_signal.connect(self.add_flow_to_table)
        self.generator_thread.stats_signal.connect(self.update_total_flows)
        self.generator_thread.start()

        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.export_button.setEnabled(True)

        self.update_log("Started IPFIX traffic generation")

    def update_total_flows(self, total_flows):
        self.total_flows_sent = total_flows
        self.total_flows_label.setText(f"Total Flows Sent: {self.total_flows_sent}")

    def stop_generation(self):
        if hasattr(self, 'generator_thread'):
            self.generator_thread.stop()
            self.generator_thread.wait()

        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def update_log(self, message):
        self.log_output.append(message)

    def add_flow_to_table(self, flow):
        row_position = self.flow_table.rowCount()
        self.flow_table.insertRow(row_position)
        for col, (key, value) in enumerate(flow.items()):
            self.flow_table.setItem(row_position, col, QTableWidgetItem(str(value)))
        self.flows.append(flow)

    def export_flows(self):
        filename, _ = QFileDialog.getSaveFileName(self, "Export Flows", "", "CSV Files (*.csv)")
        if filename:
            with open(filename, 'w', newline='') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=self.flows[0].keys() if self.flows else [])
                writer.writeheader()
                for flow in self.flows:
                    writer.writerow(flow)
            self.update_log(f"Exported {len(self.flows)} flows to {filename}")

def parse_arguments():
    parser = argparse.ArgumentParser(description="Generate fake IPFIX traffic")
    parser.add_argument("--source", help="Comma-separated list of source IP addresses to spoof")
    parser.add_argument("--destination", help="Destination IP address")
    parser.add_argument("--port", type=int, default=2055, help="Destination port (default: 2055)")
    parser.add_argument("--flows", type=int, default=0, help="Number of flows to generate (0 for infinite)")
    parser.add_argument("--interval", type=float, default=1.0, help="Interval between flow generations in seconds")
    parser.add_argument("--packets-per-interval", type=int, default=1, help="Number of packets to send in each interval")
    parser.add_argument("--flows-per-packet", type=int, default=0, help="Number of flows per packet (0 for random 1-5)")
    parser.add_argument("--gui", action="store_true", help="Launch with GUI")
    parser.add_argument("--flow-src-ips", help="Comma-separated list of source IP addresses or CIDR ranges for flows")
    parser.add_argument("--flow-dst-ips", help="Comma-separated list of destination IP addresses or CIDR ranges for flows")
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_arguments()
    
    if args.gui:
        app = QApplication(sys.argv)
        ex = IPFIXGeneratorGUI(args)
        sys.exit(app.exec_())
    else:
        source_ips = [ip.strip() for ip in args.source.split(',')] if args.source else []
        flow_src_ips = parse_ip_ranges(args.flow_src_ips) if args.flow_src_ips else []
        flow_dst_ips = parse_ip_ranges(args.flow_dst_ips) if args.flow_dst_ips else []
        generator = IPFIXGeneratorThread(args.source, args.destination, args.port, args.flows, args.interval, args.packets_per_interval, args.flows_per_packet, flow_src_ips, flow_dst_ips)
        generator.update_signal.connect(print)  # Print updates to console
        generator.run()